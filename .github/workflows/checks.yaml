name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: true
  schedule:
    - cron: "0 0 * * 0"

env:
  CARGO_TERM_COLOR: always

permissions: read-all

jobs:
  RustMeta:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.rustmeta.outputs.matrix }}
      publish: ${{ steps.rustmeta.outputs.publish }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.5.0
      - uses: sv-tools/rust-metadata-action@8618602bef8488998677a4ed006f9a9a35cf6756 # v0.1.0
        id: rustmeta
  BuildJob:
    name: Build per OS
    needs: RustMeta
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest", "macos-latest" ]
        args: ${{ fromJSON(needs.RustMeta.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.5.0
      - run: cargo build ${{ matrix.args }} --no-default-features --all-targets --verbose
  Build:
    name: Wait for build jobs to finish
    needs: BuildJob
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Check status
        if: ${{ needs.BuildJob.result != 'success' }}
        run: exit 1
  Format:
    name: Check Rust code formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.5.0
      - run: cargo fmt --all --check --verbose
  Clippy:
    name: Check Rust code with Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.5.0
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-targets: false
          cache-all-crates: true
      - run: cargo install-tools
      - run: cargo clippy --all-features --all-targets --verbose -- --deny warnings
      - run: cargo clippy --all-features --all-targets --quiet --message-format=json | cargo-action-fmt
        if: failure()
  TestJob:
    name: Test per OS
    needs: RustMeta
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest", "macos-latest" ]
        args: ${{ fromJSON(needs.RustMeta.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.5.0
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-targets: false
          cache-all-crates: true
      - run: cargo install-tools
      - name: Run tests
        run: cargo llvm-cov nextest ${{ matrix.args }} --no-default-features --all-targets --no-fail-fast --verbose
      - name: Prepare coverage report
        if: ${{ !cancelled() }}
        run: cargo llvm-cov report --lcov --output-path coverage.lcov
      - name: Upload coverage reports to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  Tests:
    name: Wait for testing jobs to finish
    needs: TestJob
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Check status
        if: ${{ needs.TestJob.result != 'success' }}
        run: exit 1
  Deps:
    name: Check dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.5.0
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-targets: false
          cache-all-crates: true
      - run: cargo install-tools
      - name: Machete
        run: cargo machete
      - name: Deny
        run: cargo deny check all
  PublishCrateJob:
    name: Test publishing per crate
    needs: RustMeta
    strategy:
      matrix:
        package: ${{ fromJSON(needs.RustMeta.outputs.publish) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.5.0
      - name: Dry run publish
        run: cargo publish --all-features --package ${{ matrix.package }} --dry-run --verbose
      - name: Create package
        run: cargo package --all-features --package ${{ matrix.package }} --verbose
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.package }}-crate
          path: target/package/${{ matrix.package }}-*.crate
  Publish:
    name: Wait for publishing jobs to finish
    needs: PublishCrateJob
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Check status
        if: ${{ needs.PublishCrateJob.result != 'success' }}
        run: exit 1
